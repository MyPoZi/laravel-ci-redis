version: 2 # use CircleCI 2.0

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
    - image: circleci/php:7.1-node-browsers # ...with this image as the primary container; this is where all `steps` will run
    - image: postgres:11.1
      environment:
        POSTGRES_USER: postgres_ci_user
        POSTGRES_DB: postgres_ci_test
    working_directory: ~/laravel # directory where steps will run
    steps: # a set of executable commands
    - checkout # special step to check out source code to working directory
    - run: sudo apt-get install libpq-dev
    - run: sudo docker-php-ext-install pdo_pgsql
    - run: sudo composer self-update
    - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
        keys:
        - composer-v1-{{ checksum "composer.lock" }}
        # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
        - composer-v1-
    - run: composer install -n --prefer-dist
    - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
        key: composer-v1-{{ checksum "composer.lock" }}
        paths:
        - vendor

    # javascript

    #- restore_cache: # special step to restore the dependency cache if `package.json` does not change
    #   keys:
    #    - node-v1-{{ checksum "package.json" }}
    #    # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
    #    - node-v1-
    #- run: yarn install
    #- save_cache: # special step to save the dependency cache with the `package.json` cache key template
    #    key: node-v1-{{ checksum "package.json" }}
    #    paths:
    #    - node_modules

    - run: php artisan migrate --env=testing
    - run: ./vendor/bin/phpunit
    #- run: ./vendor/bin/codecept build
    #- run: ./vendor/bin/codecept run
    # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
    deploy:
      steps:
      - checkout
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

    workflows:
      version: 2
      build-deploy:
        jobs:
        - build
        - deploy:
            requires:
            - build
            filters:
              branches:
                only: master
